# -*- coding: utf-8 -*-
"""
Created on Wed Mar 11 09:43:21 2020

@author: jlalv
"""

#coding: utf-8

import sqlite3

# fonction permettant d'ouvrir les données sélectionné dans la base de données en utilisant des commandes SQL 
def open_database():
      conn = sqlite3.connect('Smartfit_db')
      cursor = conn.cursor()
#cest la commande SELECT qui me permet de lire les données , ensuite je choisis les information dans la table qui m'interesse , et je précise la table avec FROM
      cursor.execute("""SELECT id, nom_exercice, muscle_cibler, niveau_difficulte FROM exercices""")
      exercices = cursor.fetchall()
      print(exercices)
# fonction permettant de supprimer les tables et leur contenues , bien pratique lors de mes test pour supprimer les variables et éviter les erreurs betes 
def clean_database():
    
      conn = sqlite3.connect('Smartfit_db')
      cursor = conn.cursor()
    
      cursor = conn.cursor()
      cursor.execute("""
      DROP TABLE profil
      """)
      conn.commit()
      
      cursor = conn.cursor()
      cursor.execute("""
      DROP TABLE compte
      """)
      conn.commit()
      
      cursor = conn.cursor()
      cursor.execute("""
      DROP TABLE corps
      """)
      conn.commit()
      
      cursor = conn.cursor()
      cursor.execute("""
      DROP TABLE exercices
      """)
      conn.commit()
      
      cursor = conn.cursor()
      cursor.execute("""
      DROP TABLE cardio
      """)
      conn.commit()
      
      cursor = conn.cursor()
      cursor.execute("""
      DROP TABLE nutrition
      """)
      conn.commit()
      
      cursor = conn.cursor()
      cursor.execute("""
      DROP TABLE suivi_perso
      """)
      conn.commit()
#la fonction essentiel qui me permet de créer chaque table et de choisir son architecture
def create_table():
    
#PRIMARY KEY AUTOINCREMENT UNIQUE me permet de creer un id qui seras une clef primaire , autoincrémenté et unique
    conn = sqlite3.connect('Smartfit_db')
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS profil(
         id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,  
         name TEXT,
         age INTERGER,
         poid FLOAT,
         taille FLOAT
    )
    """)
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS compte(
         id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,
         email TEXT,
         mdp TEXT
    )
    """)
# Grace a la commande  id_exercices INTEGER REFERENCES exercices (id_exercices), je met la clef primaire de la table exercices en tant que clef étrangere dans la table corp 
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS corps(
         id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,
         id_exercices INTEGER REFERENCES exercices (id_exercices),
         parti_corp TEXT
    )
    """)
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS exercices(
         id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,
         nom_exercice TEXT,
         muscle_cibler TEXT,  
         niveau_difficulte TEXT
    )
    """)
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS cardio(
         id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,
         nom_exercice TEXT, 
         objectif TEXT
    )
    """)
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS nutrition(
         id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,
         aliment_bon TEXT,  
         aliment_pasbon TEXT,
         conseil_general TEXT
    )
    """)
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS suivi_perso(
         id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,
         performances_exo TEXT,
         evaluation_exo INTERGER,
         commentaires_exo TEXT
    )
    """)
   
    conn.commit()


#cette fonciton ma permit de mettre en place mes tests , en ajoutant les données à mes tables créer au préalable , les exercices , les muscles ....
def insert_datas():
    """
    This function add test datas to the database
    """
    conn = sqlite3.connect('Smartfit_db')
    cursor = conn.cursor()
    
    cursor.execute("""
     INSERT INTO corps(parti_corp) VALUES(?)""", ("bras",))
    conn.commit()
    
    cursor.execute("""
     INSERT INTO corps(parti_corp) VALUES(?)""", ("abdomen",))
    conn.commit()
    
    cursor.execute("""
     INSERT INTO corps(parti_corp) VALUES(?)""", ("fesse",))
    conn.commit()
    
    cursor.execute("""
     INSERT INTO corps(parti_corp) VALUES(?)""", ("jambes",))
    conn.commit()
    
    cursor.execute("""
    INSERT INTO corps(parti_corp) VALUES(?)""", ("torse",))
    conn.commit()
    
    cursor.execute("""
    INSERT INTO corps(parti_corp) VALUES(?)""", ("dos",))
    conn.commit()
    
    cursor.execute("""
    INSERT INTO exercices(nom_exercice, muscle_cibler, niveau_difficulte) VALUES(?, ?, ?)""", ("curl", "biceps", "intermediaire"))
    conn.commit()
    
    cursor.execute("""
    INSERT INTO exercices(nom_exercice, muscle_cibler, niveau_difficulte) VALUES(?, ?, ?)""", ("dips", "pectoraux", "difficile"))
    conn.commit()
    
    cursor.execute("""
    INSERT INTO exercices(nom_exercice, muscle_cibler, niveau_difficulte) VALUES(?, ?, ?)""", ("traction", "dorsaux", "intermediaire"))
    conn.commit()
    
#j'ai donc creer une fonction pour tester une commande un peu plus pousser en sqlite3 , en fesant une rechercher spécifique en utilisant des innerjoin pour me concentré sur les parametres qui m'interessent 
    def demo():
    
      conn = sqlite3.connect('Smartfit_db')
      cursor = conn.cursor()
    
      cursor.execute("""
SELECT * FROM exercices
INNER JOIN corps ON exercices.id_exercices = corps.id_exercices
WHERE corps.parti_corp = 'bras' 
""")
      exercices = cursor.fetchall()
      print(exercices)
    
if __name__ == '__main__' :
    
    



   
     
    create_table()
    
    insert_datas()
    
    open_database()
    
    clean_database()
    
